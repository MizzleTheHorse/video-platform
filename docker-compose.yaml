version: "3.8"

services:
    frontend:
        build:
            context: .
            dockerfile: frontend/Dockerfile
        environment:
            USER_SERVICE_HOST: user_service
            VIDEO_SERVICE_HOST: video_service
        image: frontend
        networks:
            shared_network:
        ports:
            - 5000:5000
            
    user_service:
        build:
            context: .
            dockerfile: user/Dockerfile
<<<<<<< HEAD
        image: user_service  
        environment:
            DOCKER_HOST_IP: 
=======
        image: user_service 
        environment:
            MYSQL_IP: db_user
>>>>>>> 5bc28d2deef7b0857474ebb83f89da1d8038c1b4
        restart: always
        depends_on:
            - db_user
        links:
            - db_user
        volumes:
            - user_service:/system/service/instance/
            - /tmp/user_service/mysqld:/var/run/mysqld.sock
        networks:
            shared_network:

    db_user:
        image: mysql
        command: --default-authentication-plugin=mysql_native_password        
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_USER: user_host
            MYSQL_PASSWORD: secret
            MYSQL_DATABASE: user_database
        restart: always
        ports:
            - "3306:3306"
        volumes:
            - "./user/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql"
            - user_service_db:/var/lib/mysql
            - /tmp/user_service/mysqld:/var/run/mysqld.sock
        networks:
            shared_network:
    
    video_service:
        build:
            context: .
            dockerfile: video/Dockerfile
        image: video_service  
        restart: always
        environment:
            MYSQL_IP: db_video
        depends_on:
            - db_video
        volumes:
            - video_service:/system/service/instance/
            - /tmp/video_service/mysqld:/var/run/mysqld.sock
        networks:
            shared_network:
    
    db_video:
        image: mysql
        command: --default-authentication-plugin=mysql_native_password        
        environment:
            MYSQL_ROOT_PASSWORD: root
            #MYSQL_USER: video_host
            #MYSQL_PASSWORD: secret
            MYSQL_DATABASE: video_database
            MYSQL_TCP_PORT: 3307
        ports:
        - 3307:3307
        expose:
            - 3307
        restart: always
        volumes:
            - "./video/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql"
            - video_service_db:/var/lib/mysql
        networks:
            shared_network:

    kafka1:
        image: confluentinc/cp-kafka:7.2.1
        container_name: kafka1
        ports:
            - 19092:19092
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,EXTERNAL://0.0.0.0:19092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,EXTERNAL://${HOST_DNS}:19092
            KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
            KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
            KAFKA_PROCESS_ROLES: 'broker,controller'
        volumes:
            - ./run_workaround.sh:/tmp/run_workaround.sh
        command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
        networks:
            shared_network:

    kafka2:
        image: confluentinc/cp-kafka:7.2.1
        container_name: kafka2
        ports:
            - 19094:19094
        environment:
            KAFKA_NODE_ID: 2
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_LISTENERS: PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093,EXTERNAL://0.0.0.0:19094
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,EXTERNAL://${HOST_DNS}:19094
            KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
            KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
            KAFKA_PROCESS_ROLES: 'broker,controller'
        volumes:
            - ./run_workaround.sh:/tmp/run_workaround.sh
        command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
        networks:
            shared_network:

    kafka3:
        image: confluentinc/cp-kafka:7.2.1
        container_name: kafka3
        ports:
            - 19095:19095
        environment:
            KAFKA_NODE_ID: 3
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_LISTENERS: PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093,EXTERNAL://0.0.0.0:19095
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092,EXTERNAL://${HOST_DNS}:19095
            KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
            KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
            KAFKA_PROCESS_ROLES: 'broker,controller'
        volumes:
            - ./run_workaround.sh:/tmp/run_workaround.sh
        command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
        networks:
            shared_network:

    kowl: 
        image: quay.io/cloudhut/kowl:master
        ports:
            - 8088:8080
        environment:
            KAFKA_BROKERS: kafka1:9092
        restart: always
        depends_on: 
            - "kafka1"
        networks:
            shared_network:

volumes:
  user_service_db:
  video_service_db:
  user_service:
  video_service:


networks:
  shared_network:
    name: "shared_network"
